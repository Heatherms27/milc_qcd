Main changes since version 6.20apr00

Overview of changes

1. MPI-2 support (CD)
   generic/io_romio.c      Implements parallel reads and writes
		           under MPI-2.  (Use in place of
			   io_nonansi.c or io_ansi.c during
			   build.)
2. NERSC archive (Gauge Connection) support (JH, UH)
   generic/io_helpers.c    Added reload(save)_serial_archive,
                           reload(save)_parallel_archive flags.
   generic/io_lat4.c       For now, only serial reads and writes
			   are supported.
3. Multimass KS inverter (UH)
   generic/ks_multicg.c

4. Lean Wilson dslash_special (CD)
   generic_wilson/dslash_lean.c Added dslash_special
   generic_clover/d_bicgilu_cl_lean2.c Calls dslash_special
   generic_wilson/d_bicgilu_wi_lean2.c Calls dslash_special

5. Invert from temp (SG, CD)
   generic_ks/dslash_fn.c
   generic_ks/dslash_fn2.c   (Formerly dslash_fn_tmp.t3e.c
			      and dslash_fn.t3e.c)
                             Consolidated, so tmp links now require
			     the macro DSLASH_TMP_LINKS
   generic_ks/d_congrad5_fn.c (Formerly d_congrad5_fn.c and
                               d_congrad5_fn_tmp.c
                              Consolidated, so tmp vectors now
                              require the macro CONGRAD_TMP_VECTORS
   generic_ks/quark_stuff.c  (Formerly quark_stuff.c
			      and quark_stuff_tmp.c)
                             Consolidated, so tmp links now require
			     the macro DSLASH_TMP_LINKS

6. Uniform prefetching (SG, CD)

   Prefetching is supported in principle on all architectures now.
   This is done either by supplying assembly code or a generic
   C code.  We are still developing prefetching strategies, so
   there are no guarantees that the current implementation works
   or is effective.  There is NOPREFETCH macro to suppress
   prefetching to see if it is helping.  The assembly code generated
   from the generic prefetching C code needs to be checked to
   verify that the compiler hasn't suppressed its function.
   There is a FETCH_UP macro in each routine that calls for
   prefetching that can be tuned to optimize the prefetch-ahead
   stride.
   
   include/prefetch.h         Defines prefetching as macro or subroutine
			      call. -DNOPREFETCH suppresses prefetching
   include/prefetch_asm.h     Defines GNU gcc asm macros on P3 and P4
   libraries/prefetch.c        Generic C-compiled code included in su3.a
   libraries/prefetch32.c      For 32 byte cache line
   libraries/prefetch64.c      For 64 byte cache line

   The following code used prefetching, so has been changed:

   generic/path_product.c      
   generic_clover/make_clov.c
   generic_ks/d_congrad5.c
   generic_ks/d_congrad5_eo.c
   generic_ks/d_congrad5_fn.c
   generic_ks/d_congrad6.c  (Formerly d_congrad5.t3e.c)
   generic_ks/dslash_fn.c
   generic_ks/dslash_fn2.c  (Formerly dslash_fn.t3e.c)
   generic_wilson/dslash_lean.c
   generic_wilson/dslash_lean_forwards.c
   propagating_form_factor/dslash_lean_space.c
   schroed_ks_dyn/t3e_vhelp1.c
   schroed_ks_dyn/t3e_vhelp2_SF.c
   wilson_hybrids/dslash_lean.t3e.c
   wilson_hybrids/dslash_w.t3e.c

7. Some large file support (SG) (> 2 GB. only for Linux and SP for now)
   generic/io_lat4.c       Via compiler flags 
   generic/io_wb.c   

8. New header files     
   config.h	   Collects OS/compiler-dependent macros
		   to be edited before building the code.
	           This header is included throughout.
   dirs.h          Collects macros defining XUP, XDOWN, etc
		   and multiple definitions have been eliminated
		   from the code.
   int32type.h     Replaces type32.h.  Driven by config.h, now.

   prefetch.h      Defines prefetching via macros or subroutine calls
   
10. Provision for multiple stochastic estimators for psi-bar-psi staggered
   generic_ks/f_meas.c

11. Various bug fixes     
   generic_wilson/wilson_invert.c       Set min = 0 on restart.
   generic_wilson/wilson_invert_lean.c  Set min = 0 on restart.
   generic/io_wb3.c                     Fixed bit shift 
					for checksum calculation
   wilson_invert/control_w_hl.c         Same treatment of scratch 
					options as clover_invert
   wilson_invert/setup_w.c              Same treatment of scratch 
					options as clover_invert
   file_utilities                       Fixed use of headers.

12. Code unpacking

   Added Make_unpack Make_unpack_release Make_contents
   to systematize unpacking the code and allow unpacking for a single
   application, if desired.

13. Code grooming.  

   Removed Paragon support.

   comdefs.h shortened:   Removed PVM references
       Moved most com_*.c private definitions to com_*.c's,
       leaving only public definitions.

   com_*.c
       Added a public entry "void normal_exit(int status)" to allow
       pushing the setup.c MPI_Finalize call back to com_mpi.c.

       Added a new public entry "void
       sort_eight_neighborlists(int index)" that does the same thing
       as various calls to sort_eight_special but uses the public
       message index to specify the sort block, rather than the
       private neighborlist tables.  Then removed these risky
       references from ks_imp_dyn?/setup.c and ks_eigen/setup.c,
       removed the extern references to neighborlist* from the header
       file and moved the definition of the comlink structure out of
       include/comdefs.h into com_XXX.c where it belongs.

   Slightly better error handling in io_helpers.c: get_f, get_i, etc.

   Reorganized option choices in Make_<arch>. Some macros
   are now in include/config.h
   
   Modified Make_template for each arch to automate building the
   libraries.

   Modified Make_template to take better account of header
   dependencies.  Added Make_template to include directory.

   Removed save_old_binary from io_lat4.c (we can still read old binary)
   Removed the last two arguments from the save_lattice() call.
   Removed beta from the input file to hvy_qpot/su3_hqp

   Updated documentation somewhat.

-- C DeTar 15 October 2001
