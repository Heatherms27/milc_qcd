#  Gluon and (staggered) quark propagators.
#  MIMD version 7
#
#  Generic make-include file for gluon_prop/quark_prop codes
#  This template file defines rules and macros common to all architectures
#  It is intended to be an include file for other Makefiles.
#  Don't use it by itself!
#
#	"make su3_gluon_prop"		makes the gluon propagator program
#	"make su3_gluon_prop_nogfix"		makes the gluon propagator
#						program without gauge fixing
#						option
#	"make su3_gluon_prop_imp"	makes an improved gluon propagator
#					program without gauge fixing option
#	"make su3_ks_quark_prop"	makes the quark propagator program
#					with standard staggered quarks
#	"make su3_fn_quark_prop"	makes the quark propagator program
#					with "fat+Naik" staggered quarks
#	"make su3_p4_quark_prop"	makes the quark propagator program
#					with "p4" staggered quarks
#	"make su3_asqtad_quark_prop"	makes the quark propagator program
#					with "asqtad" staggered quarks
#	"make su3_asqtad_renorm"	makes the quark renormalization program
#					with "asqtad" staggered quarks
#

MYINCLUDEDIR = .
INCLUDEDIR = ../include
#Where the complex and su3 libraries are
LIBDIR = ../libraries

GLOBAL_HEADERS = ${INCLUDEDIR}

INLINE_HEADERS = \
  ../sse/include/ \
  ../sse2/include/ \
  ../libraries/include/

MY_HEADERS = \
  lattice.h \
  params.h \
  defines.h \
  gluon_prop_includes.h

HEADERS = ${GLOBAL_HEADERS} ${MY_HEADERS} ${INLINE_HEADERS} ${SCIDAC_HEADERS}

# All required object files
# Basic set from current directory
MY_OBJECTS =         \
  control.o          \
  setup.o            \
  gauge_info.o

# Basic set from generic directory
G_OBJECTS0 =          \
  d_plaq4.o          \
  d_linktrsum.o      \
  io_lat4.o          \
  io_helpers.o       \
  check_unitarity.o  \
  make_lattice.o     \
  reunitarize2.o     \
  restrict_fourier.o \
  io_detect.o        \
  io_lat_utils.o     \
  remap_stdio_from_args.o \
  path_product.o

# Basic set from generic directory
QUARK_OBJECTS0 = \
  io_helpers_ks.o \
  io_prop_ks.o \
  io_prop_ks_fm.o \
  ksprop_info.o \
  rephase.o \
  quark_stuff.o

ifeq ($(strip ${QCDOC}),true)
  G_OBJECTS1 = ${G_OBJECTS0} ploop2.o
else
  G_OBJECTS1 = ${G_OBJECTS0} ploop3.o
endif

ifeq ($(strip ${HAVEQIO}),true)
  G_OBJECTS = ${G_OBJECTS1} io_scidac.o
  QUARK_OBJECTS = ${QUARK_OBJECTS0} io_scidac_ks.o
else
  G_OBJECTS = ${G_OBJECTS1}
  QUARK_OBJECTS = ${QUARK_OBJECTS0}
endif

# Objects depending on architecture and software package

# Selection of layout
ifeq ($(strip ${QCDOC}),true)
  LAYOUT = layout_qcdoc.o # Required
else
  ifeq ($(strip ${HAVEQDP}),true)
    LAYOUT = layout_qdp.o # Required
  else
    LAYOUT = layout_hyper_prime.o # Choices possible here
  endif
endif

# Selection of a non-QDP FN Dslash
# Choices are dslash_fn.o dslash_fn2.o dslash_fn_dblstore.o
DSLASH_FN = dslash_fn2.o

# Selection of the conjugate gradient algorithm
ifeq ($(strip ${HAVEQOP}),true)
# Interface to access QOP
  CONGRAD_FN = d_congrad5_fn_qop_two_src.o d_congrad5_fn_qop.o d_congrad_opt.o
#  CONGRAD_FN = d_congrad5_two_src.o d_congrad5_fn.o d_congrad_opt.o
  CONGRAD_FN += ${ASQINVERTQOP}
else
  ifeq ($(strip ${HAVEQDP}),true)
    CONGRAD_FN = d_congrad5_two_src.o d_congrad5_fn_qdp.o d_congrad_opt.o
  else
    # Choose a non_QDP FN conjugate gradient algorithm (d_congrad5_fn.o
    # or d_congrad5_fn_fewsums.o)
    CONGRAD_FN = d_congrad5_two_src.o d_congrad5_fn.o d_congrad_opt.o
  endif
endif

# Selection of the multimass inverter
ifeq ($(strip ${HAVEQDP}),true)
  QDP_OBJECTS = stuff_qdp.o
  INV_FN_OBJECTS = ${CONGRAD_FN} ${DSLASH_FN} dslash_fn_qdp.o
  MULTI_INV_FN = ks_multicg_qdp.o
else
  INV_FN_OBJECTS = ${CONGRAD_FN} ${DSLASH_FN}
  MULTI_INV_FN = ks_multicg.o ks_multicg_offset.o
endif

# EDRAM allocation for QCDOC
ifeq ($(strip ${QCDOC}),true)
  QCDOC_OBJECTS = qcdoc_alloc.o
endif

# The only choice for inverters and Dslash for EO actions
INV_EO_OBJECTS = d_congrad5_eo.o dslash_eo.o
MULTI_INV_EO = ks_multicg.o ks_multicg_offset.o

ADD_OBJECTS = ${MACHINE_DEP_IO} ${COMMPKG} ${QCDOC_OBJECTS} ${QDP_OBJECTS} \
   ${SCIDAC_OBJECTS}

# Generic QOP objects
ifeq ($(strip ${HAVEQOP}),true)
  ADD_OBJECTS += ${GENERICQOP} map_milc_to_qop.o
endif

OBJECTS = ${MY_OBJECTS} ${G_OBJECTS} ${LAYOUT} ${ADD_OBJECTS} ${EXTRA_OBJECTS}

#Libraries for complex numbers and su3 functions
QCDLIB = ${LIBDIR}/su3.${PRECISION}.a ${LIBDIR}/complex.${PRECISION}.a
                                                                                
LIBRARIES = ${QCDLIB} ${SCIDAC_LIBRARIES}

# Default rule for C compilation
.c.o: ; ${CC} -c ${CFLAGS}  $*.c

# To force a full remake when changing targets
LASTMAKE = .lastmake.${MAKEFILE}.${PRECISION}.${MYTARGET}

${LASTMAKE}:
	/bin/rm -f .lastmake.* quark_action.h
	${MAKE} -f ${MAKEFILE} clean
	touch ${LASTMAKE}

# All make files used in this compilation
ALL_MAKES = \
   Make_template \
   ${MAKEFILE} \
   ../Make_template_qop \
   ../Make_template_scidac \
   ../generic/Make_template \
   ../generic_ks/Make_template

# To force a remake when changing any make file, header, or target
${OBJECTS}: ${HEADERS} ${LASTMAKE} ${ALL_MAKES}

quark_stuff.o: quark_action.h

# Directories where we store the improved action headers
QUARKIMP = ../generic_ks/imp_actions

quark_action.h: ${QUARKIMP}/${QUARK}
	/bin/cp ${QUARKIMP}/${QUARK} quark_action.h

ifeq ($(strip ${QCDOC}),true)
  DQCDOC = -DQCDOC
endif
 
ifeq ($(strip ${HAVEQMP}),true)
  DHAVE_QMP = -DHAVE_QMP
endif
 
ifeq ($(strip ${HAVEQIO}),true)
  DHAVE_QIO = -DHAVE_QIO
endif
 
ifeq ($(strip ${HAVEQDP}),true)
  DHAVE_QDP = -DHAVE_QDP
endif
                                                                                
ifeq ($(strip ${HAVEQOP}),true)
  DHAVE_QOP = -DHAVE_QOP
endif
                                                                                
DARCH = ${DQCDOC} ${DHAVE_QMP} ${DHAVE_QIO} ${DHAVE_QDP} ${DHAVE_QOP}
                                                                                
##### Targets:
#               ("FN" = "fat+Naik")

## NOTE: here QUARK is not actually used!
su3_gluon_prop_nogfix::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DGLUON_PROP" \
	"EXTRA_OBJECTS= gluon_prop.o"

su3_gluon_prop_imp::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DGLUON_PROP" \
	"EXTRA_OBJECTS= gluon_prop_imp.o"

su3_gluon_prop::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DGLUON_PROP -DGFIX" \
	"EXTRA_OBJECTS= gluon_prop.o gaugefix2.o gaugefixfft.o"

su3_ks_quark_prop::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN -DQUARK_PROP -DGFIX" \
	"QUARK = onelink_action.h" \
	"EXTRA_OBJECTS= ${INV_FN_OBJECTS} ${MULTI_INV_FN} \
	${QUARK_OBJECTS} quark_prop.o gaugefix2.o gaugefixfft.o"

su3_fn_quark_prop::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN -DQUARK_PROP -DGFIX -DNAIK" \
	"QUARK = naik_action.h" \
	"EXTRA_OBJECTS= ${INV_FN_OBJECTS} ${MULTI_INV_FN} \
	${QUARK_OBJECTS} quark_prop.o gaugefix2.o gaugefixfft.o"

su3_p4_quark_prop::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DEO -DQUARK_PROP -DGFIX" \
	"QUARK = p4_action.h" \
	"EXTRA_OBJECTS= ${INV_EO_OBJECTS} ${MULTI_INV_EO} \
	${QUARK_OBJECTS} quark_prop.o gaugefix2.o gaugefixfft.o"

su3_asqtad_quark_prop::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN -DQUARK_PROP -DGFIX -DNAIK" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS= ${INV_FN_OBJECTS} ${MULTI_INV_FN} \
	${QUARK_OBJECTS} quark_prop.o gaugefix2.o gaugefixfft.o"

su3_asqtad_renorm::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN -DQUARK_PROP -DQUARK_RENORM -DGFIX -DNAIK" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS= ${INV_FN_OBJECTS} ${MULTI_INV_FN} \
	${QUARK_OBJECTS} quark_renorm.o gaugefix2.o gaugefixfft.o"

clean:
	-/bin/rm -f *.o


# Rules for generic routines
include ../generic/Make_template

# Rules for generic_ks routines
include ../generic_ks/Make_template

libmake:
	@echo Building libraries with ${MAKELIBRARIES}
	cd ${LIBDIR} ;\
	${MAKE} -f ${MAKELIBRARIES} "APP_CC=${CC}" "PRECISION=${PRECISION}" all

localmake: ${OBJECTS} ${LIBRARIES}
	${LD} -o ${MYTARGET} ${LDFLAGS} \
	${OBJECTS} ${QCDLIB} ${ILIB} -lm
	touch localmake

target:	libmake localmake

