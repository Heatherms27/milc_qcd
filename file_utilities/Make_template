#  file_utilities
#  MIMD version 6
#
#  Generic make-include file for file_utilities
#  This template file defines rules and macros common to all architectures
#  It is intended to be an include file for other Makefiles.
#  Don't use it by itself!
#
#	"make check_gauge" reads a gauge configuration file and 
#             performs checksums (V5 format only) and a unitarity check
#	"make check_prop" reads a propagator file and performs
#             checksums (V5 format only)
#       "make ckpt1_to_v5" converts checkpoint1 gauge configuration
#             format to V5 format. 

MYINCLUDEDIR = .
INCLUDEDIR = ../include
#Where the complex and su3 libraries are
LIBDIR = ../libraries

GLOBAL_HEADERS = \
  ${INCLUDEDIR}/config.h \
  ${INCLUDEDIR}/complex.h \
  ${INCLUDEDIR}/su3.h \
  ${INCLUDEDIR}/comdefs.h \
  ${INCLUDEDIR}/io_lat.h \
  ${INCLUDEDIR}/io_wprop.h \
  ${INCLUDEDIR}/generic.h \
  ${INCLUDEDIR}/macros.h

MY_HEADERS = \
  lattice.h \
  defines.h

HEADERS = ${GLOBAL_HEADERS} ${MY_HEADERS}

# Choose one of the lattice layout algorithms:
LAYOUT = layout_hyper

MY_OBJECTS= \
  gauge_info.o

# Basic set from generic directory
G_OBJECTS1 = \
  d_plaq4.o \
  io_detect.o \
  io_lat4.o

ifeq ($(strip ${HAVEQIO}),true)
  G_OBJECTS = ${G_OBJECTS1} io_scidac.o
else
  G_OBJECTS = ${G_OBJECTS1}
endif

# Basic set from generic KS directory
G_KS_OBJECTS = \

# Objects depending on architecture and software package 

# Layout
ifeq ($(strip ${QCDOC}),true)
  LAYOUT = layout_qcdoc.o # Required
else
  ifeq ($(strip ${HAVEQDP}),true)
    LAYOUT = layout_qdp.o # Required
  else
    LAYOUT = layout_hyper.o # Choices possible here
  endif
endif

ifeq ($(strip ${QCDOC}),true)
  QCDOC_OBJECTS = qcdoc_alloc.o
endif

ADD_OBJECTS = ${MACHINE_DEP_IO} ${COMMPKG} ${QCDOC_OBJECTS} ${QDP_OBJECTS} \
   ${SCIDAC_OBJECTS}

OBJECTS = ${MY_OBJECTS} ${G_OBJECTS} ${G_KS_OBJECTS} \
	${LAYOUT} ${ADD_OBJECTS} ${EXTRA_OBJECTS}

#Libraries for complex numbers and su3 functions
QCDLIB = ${LIBDIR}/su3.${PRECISION}.a ${LIBDIR}/complex.${PRECISION}.a 

.c.o: ; ${CC} -c ${CFLAGS} $*.c 

# To force a full remake when changing targets
LASTMAKE = .lastmake.${MAKEFILE}.${MYTARGET}

${LASTMAKE}:
	-/bin/rm -f .lastmake.*
	${MAKE} -f ${MAKEFILE} clean
	touch ${LASTMAKE}

# To force a remake when changing make files
ALL_MAKES = Make_template ../generic/Make_template \
  ${MAKEFILE} ../include/Make_template

${OBJECTS} : ${HEADERS} ${LASTMAKE} ${ALL_MAKES}

########################################################

ifeq ($(strip ${QCDOC}),true)
  DQCDOC = -DQCDOC
endif

ifeq ($(strip ${HAVEQIO}),true)
  DHAVE_QIO = -DHAVE_QIO
endif

ifeq ($(strip ${HAVEQDP}),true)
  DHAVE_QDP = -DHAVE_QDP
endif

DARCH = ${DQCDOC} ${DHAVE_QIO} ${DHAVE_QDP}

check_prop::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= check_prop" \
	"DEFINES= ${DARCH}" \
	"EXTRA_OBJECTS=  check_prop.o io_prop_w.o wilson_info_dummy.o \
	gauge_info_dummy.o"

check_gauge::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= check_gauge" \
	"DEFINES= ${DARCH}" \
	"EXTRA_OBJECTS= check_gauge.o \
	check_unitarity.o gauge_info_dummy.o"

lattice_to_scidac::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= lattice_to_scidac" \
	"DEFINES= ${DARCH}" \
	"EXTRA_OBJECTS=  lattice_to_scidac.o \
	check_unitarity.o gauge_info_dummy.o io_scidac.o"

ksprop_to_scidac::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= ksprop_to_scidac" \
	"DEFINES= ${DARCH}" \
	"EXTRA_OBJECTS=  ksprop_to_scidac.o io_helpers_ks.o \
	io_prop_ks.o io_prop_ks_fm.o io_scidac_ks.o ksprop_info.o"

wprop_to_wprop::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= wprop_to_wprop" \
	"DEFINES= ${DARCH}" \
	"EXTRA_OBJECTS=  wprop_to_wprop.o io_helpers_w.o \
	io_prop_w.o io_prop_w_fm.o io_scidac_w.o wprop_info.o"

ckpt1_to_v5::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= ckpt1_to_v5" \
	"DEFINES= ${DARCH}" \
	"EXTRA_OBJECTS=  ckpt1_to_v5.o \
	check_unitarity.o gauge_info.o"

clean:
	-/bin/rm -f *.o

# Rules for generic routines
include ../generic/Make_template

# Rules for generic_ks routines
include ../generic_ks/Make_template

# Rules for generic_wilson routines
include ../generic_wilson/Make_template

# Rules for header files
include ../include/Make_template

libmake:
	@echo Building libraries with ${MAKELIBRARIES}
	cd ${LIBDIR} ;\
	${MAKE} -f ${MAKELIBRARIES} "APP_CC=${CC}" "PRECISION=${PRECISION}" all

localmake: ${OBJECTS} ${QCDLIB}
	${LD} ${LDFLAGS} -o ${MYTARGET} \
	${OBJECTS} ${QCDLIB} ${ILIB} -lm
	touch localmake

target: libmake localmake 

